// Generated by gencpp from file planner/turtle_command.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_TURTLE_COMMAND_H
#define PLANNER_MESSAGE_TURTLE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner
{
template <class ContainerAllocator>
struct turtle_command_
{
  typedef turtle_command_<ContainerAllocator> Type;

  turtle_command_()
    : turtle_id()
    , command()
    , posX(0.0)
    , posY(0.0)
    , angle(0.0)  {
    }
  turtle_command_(const ContainerAllocator& _alloc)
    : turtle_id(_alloc)
    , command(_alloc)
    , posX(0.0)
    , posY(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turtle_id_type;
  _turtle_id_type turtle_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef float _posX_type;
  _posX_type posX;

   typedef float _posY_type;
  _posY_type posY;

   typedef float _angle_type;
  _angle_type angle;




  typedef boost::shared_ptr< ::planner::turtle_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::turtle_command_<ContainerAllocator> const> ConstPtr;

}; // struct turtle_command_

typedef ::planner::turtle_command_<std::allocator<void> > turtle_command;

typedef boost::shared_ptr< ::planner::turtle_command > turtle_commandPtr;
typedef boost::shared_ptr< ::planner::turtle_command const> turtle_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::turtle_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::turtle_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'planner': ['/home/wasp_vb/wasp_cht2_catkin/src/planner/msg', '/home/wasp_vb/wasp_cht2_catkin/src/planner/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planner::turtle_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::turtle_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::turtle_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::turtle_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::turtle_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::turtle_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::turtle_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd583d87765dc41b172179f34ec8aa3a";
  }

  static const char* value(const ::planner::turtle_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd583d87765dc41bULL;
  static const uint64_t static_value2 = 0x172179f34ec8aa3aULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::turtle_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/turtle_command";
  }

  static const char* value(const ::planner::turtle_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::turtle_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string turtle_id\n\
string command\n\
float32 posX\n\
float32 posY\n\
float32 angle\n\
";
  }

  static const char* value(const ::planner::turtle_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::turtle_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turtle_id);
      stream.next(m.command);
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtle_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::turtle_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::turtle_command_<ContainerAllocator>& v)
  {
    s << indent << "turtle_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turtle_id);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "posX: ";
    Printer<float>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<float>::stream(s, indent + "  ", v.posY);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_TURTLE_COMMAND_H
